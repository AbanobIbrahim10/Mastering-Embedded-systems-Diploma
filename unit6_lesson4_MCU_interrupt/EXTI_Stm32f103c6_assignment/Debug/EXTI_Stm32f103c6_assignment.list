
EXTI_Stm32f103c6_assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000310  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  4 .ARM          00000000  08000440  08000440  00010448  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000440  08000448  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000448  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000448  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010448  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002dc  00000000  00000000  00010471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000022b  00000000  00000000  0001074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000001c4  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d8  00000000  00000000  00010b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000080  00000000  00000000  00010c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000c9a  00000000  00000000  00010c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000030a  00000000  00000000  00011932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000033d3  00000000  00000000  00011c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001500f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000015c  00000000  00000000  00015060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000428 	.word	0x08000428

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000428 	.word	0x08000428

08000170 <EXTI_init>:
#include "STD_TYPES.h"
#include "EXTI.h"


void EXTI_init()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//EXTI0 rising edge
	SET_BIT(EXTI_RTSR_uint32_REG,0);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <EXTI_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <EXTI_init+0x24>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]
	//EXTIO interrupt Enable
	SET_BIT(EXTI_IMR_uint32_REG,0);
 8000180:	4b05      	ldr	r3, [pc, #20]	; (8000198 <EXTI_init+0x28>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <EXTI_init+0x28>)
 8000186:	f043 0301 	orr.w	r3, r3, #1
 800018a:	6013      	str	r3, [r2, #0]

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40010408 	.word	0x40010408
 8000198:	40010400 	.word	0x40010400

0800019c <GPIO_init>:


#include "GPIO.h"
#include "STD_TYPES.h"
void GPIO_init()
{
 800019c:	b480      	push	{r7}
 800019e:	af00      	add	r7, sp, #0


	//GPIOA0 SET TO BE INPUT PIN
	CLR_BIT(GPIOA_CRL_uint32_REG,0);
 80001a0:	4b3a      	ldr	r3, [pc, #232]	; (800028c <GPIO_init+0xf0>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a39      	ldr	r2, [pc, #228]	; (800028c <GPIO_init+0xf0>)
 80001a6:	f023 0301 	bic.w	r3, r3, #1
 80001aa:	6013      	str	r3, [r2, #0]
	CLR_BIT(GPIOA_CRL_uint32_REG,1);
 80001ac:	4b37      	ldr	r3, [pc, #220]	; (800028c <GPIO_init+0xf0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a36      	ldr	r2, [pc, #216]	; (800028c <GPIO_init+0xf0>)
 80001b2:	f023 0302 	bic.w	r3, r3, #2
 80001b6:	6013      	str	r3, [r2, #0]
	//GPIOA0 SET TO BE INPUT PULLUP/PULDOWN
	CLR_BIT(GPIOA_CRL_uint32_REG,2);
 80001b8:	4b34      	ldr	r3, [pc, #208]	; (800028c <GPIO_init+0xf0>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <GPIO_init+0xf0>)
 80001be:	f023 0304 	bic.w	r3, r3, #4
 80001c2:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA_CRL_uint32_REG,3);
 80001c4:	4b31      	ldr	r3, [pc, #196]	; (800028c <GPIO_init+0xf0>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	4a30      	ldr	r2, [pc, #192]	; (800028c <GPIO_init+0xf0>)
 80001ca:	f043 0308 	orr.w	r3, r3, #8
 80001ce:	6013      	str	r3, [r2, #0]
	//set GPIOA to be input pull-UP
	SET_BIT(GPIOA_ODR_uint32_REG,0);
 80001d0:	4b2f      	ldr	r3, [pc, #188]	; (8000290 <GPIO_init+0xf4>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a2e      	ldr	r2, [pc, #184]	; (8000290 <GPIO_init+0xf4>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6013      	str	r3, [r2, #0]

	//GPIOC13 SET TO BE output PIN
	CLR_BIT(GPIOC_CRH_uint32_REG,20);
 80001dc:	4b2d      	ldr	r3, [pc, #180]	; (8000294 <GPIO_init+0xf8>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a2c      	ldr	r2, [pc, #176]	; (8000294 <GPIO_init+0xf8>)
 80001e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001e6:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOC_CRH_uint32_REG,21);
 80001e8:	4b2a      	ldr	r3, [pc, #168]	; (8000294 <GPIO_init+0xf8>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a29      	ldr	r2, [pc, #164]	; (8000294 <GPIO_init+0xf8>)
 80001ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001f2:	6013      	str	r3, [r2, #0]
	//GPIOA13 SET TO BE output push pull
	CLR_BIT(GPIOC_CRH_uint32_REG,22);
 80001f4:	4b27      	ldr	r3, [pc, #156]	; (8000294 <GPIO_init+0xf8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a26      	ldr	r2, [pc, #152]	; (8000294 <GPIO_init+0xf8>)
 80001fa:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001fe:	6013      	str	r3, [r2, #0]
	CLR_BIT(GPIOC_CRH_uint32_REG,23);
 8000200:	4b24      	ldr	r3, [pc, #144]	; (8000294 <GPIO_init+0xf8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a23      	ldr	r2, [pc, #140]	; (8000294 <GPIO_init+0xf8>)
 8000206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800020a:	6013      	str	r3, [r2, #0]
	//set GPIOA to be high voltage output
	SET_BIT(GPIOC_ODR_uint32_REG,13);
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <GPIO_init+0xfc>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a21      	ldr	r2, [pc, #132]	; (8000298 <GPIO_init+0xfc>)
 8000212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000216:	6013      	str	r3, [r2, #0]

	//GPIOA13 SET TO BE output PIN
	CLR_BIT(GPIOA_CRH_uint32_REG,20);
 8000218:	4b20      	ldr	r3, [pc, #128]	; (800029c <GPIO_init+0x100>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <GPIO_init+0x100>)
 800021e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000222:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA_CRH_uint32_REG,21);
 8000224:	4b1d      	ldr	r3, [pc, #116]	; (800029c <GPIO_init+0x100>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a1c      	ldr	r2, [pc, #112]	; (800029c <GPIO_init+0x100>)
 800022a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800022e:	6013      	str	r3, [r2, #0]
	//GPIOA13 SET TO BE output push pull
	CLR_BIT(GPIOA_CRH_uint32_REG,22);
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <GPIO_init+0x100>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a19      	ldr	r2, [pc, #100]	; (800029c <GPIO_init+0x100>)
 8000236:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800023a:	6013      	str	r3, [r2, #0]
	CLR_BIT(GPIOA_CRH_uint32_REG,23);
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <GPIO_init+0x100>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a16      	ldr	r2, [pc, #88]	; (800029c <GPIO_init+0x100>)
 8000242:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000246:	6013      	str	r3, [r2, #0]
	//set GPIOA to be high voltage output
	SET_BIT(GPIOA_ODR_uint32_REG,13);
 8000248:	4b11      	ldr	r3, [pc, #68]	; (8000290 <GPIO_init+0xf4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <GPIO_init+0xf4>)
 800024e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000252:	6013      	str	r3, [r2, #0]



	//attach EXTI0 -> PA0
	CLR_BIT(AFIO_EXTICR1_uint32_REG,0);
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <GPIO_init+0x104>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <GPIO_init+0x104>)
 800025a:	f023 0301 	bic.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
	CLR_BIT(AFIO_EXTICR1_uint32_REG,1);
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <GPIO_init+0x104>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a0e      	ldr	r2, [pc, #56]	; (80002a0 <GPIO_init+0x104>)
 8000266:	f023 0302 	bic.w	r3, r3, #2
 800026a:	6013      	str	r3, [r2, #0]
	CLR_BIT(AFIO_EXTICR1_uint32_REG,2);
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <GPIO_init+0x104>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <GPIO_init+0x104>)
 8000272:	f023 0304 	bic.w	r3, r3, #4
 8000276:	6013      	str	r3, [r2, #0]
	CLR_BIT(AFIO_EXTICR1_uint32_REG,3);
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <GPIO_init+0x104>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a08      	ldr	r2, [pc, #32]	; (80002a0 <GPIO_init+0x104>)
 800027e:	f023 0308 	bic.w	r3, r3, #8
 8000282:	6013      	str	r3, [r2, #0]
}
 8000284:	bf00      	nop
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40010800 	.word	0x40010800
 8000290:	4001080c 	.word	0x4001080c
 8000294:	40011004 	.word	0x40011004
 8000298:	4001100c 	.word	0x4001100c
 800029c:	40010804 	.word	0x40010804
 80002a0:	40010008 	.word	0x40010008

080002a4 <Toggle_pin_void>:

void Toggle_pin_void (uint8 Copy_uint8_PortId,uint8 Copy_uint8_PinId)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uint8_PortId)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d10a      	bne.n	80002d0 <Toggle_pin_void+0x2c>
	{
	case GPIO_uint8_PORTC:
		switch(Copy_uint8_PinId)
 80002ba:	79bb      	ldrb	r3, [r7, #6]
 80002bc:	2b0d      	cmp	r3, #13
 80002be:	d106      	bne.n	80002ce <Toggle_pin_void+0x2a>
		{
		case GPIO_uint8_PIN13:
			TOGGLE_BIT(GPIOC_ODR_uint32_REG,GPIO_uint8_PIN13);
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <Toggle_pin_void+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a05      	ldr	r2, [pc, #20]	; (80002dc <Toggle_pin_void+0x38>)
 80002c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002ca:	6013      	str	r3, [r2, #0]
			break;
 80002cc:	bf00      	nop
		}
		break;
 80002ce:	bf00      	nop

	}
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	4001100c 	.word	0x4001100c

080002e0 <NVIC_init>:


#include "NVIC.h"
#include "STD_TYPES.h"
void NVIC_init()
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	SET_BIT(NVIC_SETENA_uint32_REG,6);
 80002e4:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <NVIC_init+0x18>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <NVIC_init+0x18>)
 80002ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ee:	6013      	str	r3, [r2, #0]
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100

080002fc <RCC_init>:

#include "RCC.h"
#include "STD_TYPES.h"

void RCC_init()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
//	CLR_BIT(RCC_CR_uint32_REG,0);


/******provide clock To some peripherals******/
	//provide clock to GPIOA
	SET_BIT(RCC_APB2ENR_uint32_REG,2);
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <RCC_init+0x30>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a09      	ldr	r2, [pc, #36]	; (800032c <RCC_init+0x30>)
 8000306:	f043 0304 	orr.w	r3, r3, #4
 800030a:	6013      	str	r3, [r2, #0]
	//provide clock to GPIOC
	SET_BIT(RCC_APB2ENR_uint32_REG,4);
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <RCC_init+0x30>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <RCC_init+0x30>)
 8000312:	f043 0310 	orr.w	r3, r3, #16
 8000316:	6013      	str	r3, [r2, #0]
	//provide clock to AFIO
	SET_BIT(RCC_APB2ENR_uint32_REG,0);
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <RCC_init+0x30>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a03      	ldr	r2, [pc, #12]	; (800032c <RCC_init+0x30>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]



}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40021018 	.word	0x40021018

08000330 <main>:
#include "NVIC.h"

void EXTI0_IRQHandler();
volatile int x=0;
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0


	RCC_init();
 8000334:	f7ff ffe2 	bl	80002fc <RCC_init>
	GPIO_init();
 8000338:	f7ff ff30 	bl	800019c <GPIO_init>
	EXTI_init();
 800033c:	f7ff ff18 	bl	8000170 <EXTI_init>
	NVIC_init();
 8000340:	f7ff ffce 	bl	80002e0 <NVIC_init>


    /* Loop forever */
	while(1);
 8000344:	e7fe      	b.n	8000344 <main+0x14>
	...

08000348 <EXTI0_IRQHandler>:
	return 0;
}


void EXTI0_IRQHandler()
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
			for(x=0;x<100000;x++);
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <EXTI0_IRQHandler+0x38>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	e004      	b.n	800035e <EXTI0_IRQHandler+0x16>
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <EXTI0_IRQHandler+0x38>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3301      	adds	r3, #1
 800035a:	4a09      	ldr	r2, [pc, #36]	; (8000380 <EXTI0_IRQHandler+0x38>)
 800035c:	6013      	str	r3, [r2, #0]
 800035e:	4b08      	ldr	r3, [pc, #32]	; (8000380 <EXTI0_IRQHandler+0x38>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <EXTI0_IRQHandler+0x3c>)
 8000364:	4293      	cmp	r3, r2
 8000366:	ddf5      	ble.n	8000354 <EXTI0_IRQHandler+0xc>
	Toggle_pin_void(GPIO_uint8_PORTC,GPIO_uint8_PIN13);
 8000368:	210d      	movs	r1, #13
 800036a:	2002      	movs	r0, #2
 800036c:	f7ff ff9a 	bl	80002a4 <Toggle_pin_void>
	SET_BIT(EXTI_PR_uint32_REG,0);
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI0_IRQHandler+0x40>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI0_IRQHandler+0x40>)
 8000376:	f043 0301 	orr.w	r3, r3, #1
 800037a:	6013      	str	r3, [r2, #0]

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	2000001c 	.word	0x2000001c
 8000384:	0001869f 	.word	0x0001869f
 8000388:	40010414 	.word	0x40010414

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	; (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	; (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	; (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 f811 	bl	80003e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ffb7 	bl	8000330 <main>

080003c2 <LoopForever>:

LoopForever:
  b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d0:	08000448 	.word	0x08000448
  ldr r2, =_sbss
 80003d4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d8:	20000020 	.word	0x20000020

080003dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC1_2_IRQHandler>
	...

080003e0 <__libc_init_array>:
 80003e0:	b570      	push	{r4, r5, r6, lr}
 80003e2:	2600      	movs	r6, #0
 80003e4:	4d0c      	ldr	r5, [pc, #48]	; (8000418 <__libc_init_array+0x38>)
 80003e6:	4c0d      	ldr	r4, [pc, #52]	; (800041c <__libc_init_array+0x3c>)
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	42a6      	cmp	r6, r4
 80003ee:	d109      	bne.n	8000404 <__libc_init_array+0x24>
 80003f0:	f000 f81a 	bl	8000428 <_init>
 80003f4:	2600      	movs	r6, #0
 80003f6:	4d0a      	ldr	r5, [pc, #40]	; (8000420 <__libc_init_array+0x40>)
 80003f8:	4c0a      	ldr	r4, [pc, #40]	; (8000424 <__libc_init_array+0x44>)
 80003fa:	1b64      	subs	r4, r4, r5
 80003fc:	10a4      	asrs	r4, r4, #2
 80003fe:	42a6      	cmp	r6, r4
 8000400:	d105      	bne.n	800040e <__libc_init_array+0x2e>
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f855 3b04 	ldr.w	r3, [r5], #4
 8000408:	4798      	blx	r3
 800040a:	3601      	adds	r6, #1
 800040c:	e7ee      	b.n	80003ec <__libc_init_array+0xc>
 800040e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000412:	4798      	blx	r3
 8000414:	3601      	adds	r6, #1
 8000416:	e7f2      	b.n	80003fe <__libc_init_array+0x1e>
 8000418:	08000440 	.word	0x08000440
 800041c:	08000440 	.word	0x08000440
 8000420:	08000440 	.word	0x08000440
 8000424:	08000444 	.word	0x08000444

08000428 <_init>:
 8000428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042a:	bf00      	nop
 800042c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042e:	bc08      	pop	{r3}
 8000430:	469e      	mov	lr, r3
 8000432:	4770      	bx	lr

08000434 <_fini>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr
