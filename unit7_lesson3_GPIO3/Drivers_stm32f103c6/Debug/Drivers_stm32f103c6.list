
Drivers_stm32f103c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  4 .ARM          00000000  080003b8  080003b8  000103c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b8  080003c0  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b8  080003b8  000103b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103e9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004ea  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001f6  00000000  00000000  00010916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000254  00000000  00000000  00010b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000090  00000000  00000000  00010d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000068  00000000  00000000  00010df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001117  00000000  00000000  00010e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000781  00000000  00000000  00011f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000439e  00000000  00000000  000126f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000158  00000000  00000000  00016a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a0 	.word	0x080003a0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a0 	.word	0x080003a0

08000170 <main>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
	GPIOC_CLOCK_EN();
 8000176:	4b1a      	ldr	r3, [pc, #104]	; (80001e0 <main+0x70>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a19      	ldr	r2, [pc, #100]	; (80001e0 <main+0x70>)
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
	GPIO_PinConfig_t PINC0;
	PINC0.GPIO_PinNumber=GPIO_PIN_13;
 8000182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000186:	81bb      	strh	r3, [r7, #12]
	PINC0.GPIO_Mode=GPIO_MODE_OUTPUT_PP;
 8000188:	2304      	movs	r3, #4
 800018a:	73bb      	strb	r3, [r7, #14]
	PINC0.GPIO_Speed=GPIO_SPEED_10M;
 800018c:	2301      	movs	r3, #1
 800018e:	73fb      	strb	r3, [r7, #15]

	MCAL_GPIO_Init(GPIOC,&PINC0);
 8000190:	f107 030c 	add.w	r3, r7, #12
 8000194:	4619      	mov	r1, r3
 8000196:	4813      	ldr	r0, [pc, #76]	; (80001e4 <main+0x74>)
 8000198:	f000 f86f 	bl	800027a <MCAL_GPIO_Init>


    /* Loop forever */
	while(1)
	{
		MCAL_GPIO_Write_Pin(GPIOC, GPIO_PIN_13, GPIO_PIN_VALUE_HIGH);
 800019c:	2201      	movs	r2, #1
 800019e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a2:	4810      	ldr	r0, [pc, #64]	; (80001e4 <main+0x74>)
 80001a4:	f000 f8c2 	bl	800032c <MCAL_GPIO_Write_Pin>
		for(volatile int i=0;i<100000;i++);
 80001a8:	2300      	movs	r3, #0
 80001aa:	60bb      	str	r3, [r7, #8]
 80001ac:	e002      	b.n	80001b4 <main+0x44>
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	3301      	adds	r3, #1
 80001b2:	60bb      	str	r3, [r7, #8]
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	4a0c      	ldr	r2, [pc, #48]	; (80001e8 <main+0x78>)
 80001b8:	4293      	cmp	r3, r2
 80001ba:	ddf8      	ble.n	80001ae <main+0x3e>
		MCAL_GPIO_Write_Pin(GPIOC, GPIO_PIN_13, GPIO_PIN_VALUE_LOW);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4808      	ldr	r0, [pc, #32]	; (80001e4 <main+0x74>)
 80001c4:	f000 f8b2 	bl	800032c <MCAL_GPIO_Write_Pin>
		for(volatile int i=0;i<100000;i++);
 80001c8:	2300      	movs	r3, #0
 80001ca:	607b      	str	r3, [r7, #4]
 80001cc:	e002      	b.n	80001d4 <main+0x64>
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	3301      	adds	r3, #1
 80001d2:	607b      	str	r3, [r7, #4]
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <main+0x78>)
 80001d8:	4293      	cmp	r3, r2
 80001da:	ddf8      	ble.n	80001ce <main+0x5e>
		MCAL_GPIO_Write_Pin(GPIOC, GPIO_PIN_13, GPIO_PIN_VALUE_HIGH);
 80001dc:	e7de      	b.n	800019c <main+0x2c>
 80001de:	bf00      	nop
 80001e0:	40021018 	.word	0x40021018
 80001e4:	40011000 	.word	0x40011000
 80001e8:	0001869f 	.word	0x0001869f

080001ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001ec:	480d      	ldr	r0, [pc, #52]	; (8000224 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001f4:	480c      	ldr	r0, [pc, #48]	; (8000228 <LoopForever+0x6>)
  ldr r1, =_edata
 80001f6:	490d      	ldr	r1, [pc, #52]	; (800022c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <LoopForever+0xe>)
  movs r3, #0
 80001fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001fc:	e002      	b.n	8000204 <LoopCopyDataInit>

080001fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000202:	3304      	adds	r3, #4

08000204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000208:	d3f9      	bcc.n	80001fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800020a:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800020c:	4c0a      	ldr	r4, [pc, #40]	; (8000238 <LoopForever+0x16>)
  movs r3, #0
 800020e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000210:	e001      	b.n	8000216 <LoopFillZerobss>

08000212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000214:	3204      	adds	r2, #4

08000216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000218:	d3fb      	bcc.n	8000212 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800021a:	f000 f89d 	bl	8000358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800021e:	f7ff ffa7 	bl	8000170 <main>

08000222 <LoopForever>:

LoopForever:
  b LoopForever
 8000222:	e7fe      	b.n	8000222 <LoopForever>
  ldr   r0, =_estack
 8000224:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800022c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000230:	080003c0 	.word	0x080003c0
  ldr r2, =_sbss
 8000234:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000238:	2000001c 	.word	0x2000001c

0800023c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800023c:	e7fe      	b.n	800023c <ADC1_2_IRQHandler>

0800023e <GET_PSITION>:
 * @param[out] 	-
 * @retval		-
 * Note			-
 */
uint8_t GET_PSITION(uint16_t pin)
{
 800023e:	b480      	push	{r7}
 8000240:	b085      	sub	sp, #20
 8000242:	af00      	add	r7, sp, #0
 8000244:	4603      	mov	r3, r0
 8000246:	80fb      	strh	r3, [r7, #6]
	uint8_t cntr=0;
 8000248:	2300      	movs	r3, #0
 800024a:	73fb      	strb	r3, [r7, #15]
	while(pin !=1)
 800024c:	e005      	b.n	800025a <GET_PSITION+0x1c>
	{
		cntr++;
 800024e:	7bfb      	ldrb	r3, [r7, #15]
 8000250:	3301      	adds	r3, #1
 8000252:	73fb      	strb	r3, [r7, #15]
		pin=pin>>1;
 8000254:	88fb      	ldrh	r3, [r7, #6]
 8000256:	085b      	lsrs	r3, r3, #1
 8000258:	80fb      	strh	r3, [r7, #6]
	while(pin !=1)
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d1f6      	bne.n	800024e <GET_PSITION+0x10>
	}

	return (cntr>7)?(cntr-8):(cntr);
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	2b07      	cmp	r3, #7
 8000264:	d903      	bls.n	800026e <GET_PSITION+0x30>
 8000266:	7bfb      	ldrb	r3, [r7, #15]
 8000268:	3b08      	subs	r3, #8
 800026a:	b2db      	uxtb	r3, r3
 800026c:	e000      	b.n	8000270 <GET_PSITION+0x32>
 800026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000270:	4618      	mov	r0, r3
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr

0800027a <MCAL_GPIO_Init>:

void MCAL_GPIO_Init(GPIO_TypeDef_t * GPIOx,GPIO_PinConfig_t * Pin_config)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	b084      	sub	sp, #16
 800027e:	af00      	add	r7, sp, #0
 8000280:	6078      	str	r0, [r7, #4]
 8000282:	6039      	str	r1, [r7, #0]

	uint32_t* ptr_config_reg = (Pin_config->GPIO_PinNumber > GPIO_PIN_7)?((uint32_t*)&(GPIOx->GPIOx_CRH)):((uint32_t*)&(GPIOx->GPIOx_CRL));
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	2b80      	cmp	r3, #128	; 0x80
 800028a:	d902      	bls.n	8000292 <MCAL_GPIO_Init+0x18>
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	3304      	adds	r3, #4
 8000290:	e000      	b.n	8000294 <MCAL_GPIO_Init+0x1a>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	60fb      	str	r3, [r7, #12]
	uint8_t shift_value = GET_PSITION(Pin_config->GPIO_PinNumber)*4;
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ffcf 	bl	800023e <GET_PSITION>
 80002a0:	4603      	mov	r3, r0
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	72fb      	strb	r3, [r7, #11]
	*ptr_config_reg &= ~((uint32_t)0xF) <<shift_value ;
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	7afb      	ldrb	r3, [r7, #11]
 80002ac:	f06f 010f 	mvn.w	r1, #15
 80002b0:	fa01 f303 	lsl.w	r3, r1, r3
 80002b4:	401a      	ands	r2, r3
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	601a      	str	r2, [r3, #0]

	if (Pin_config->GPIO_Mode==GPIO_MODE_ANALOG || Pin_config->GPIO_Mode==GPIO_MODE_INPUT_FL || Pin_config->GPIO_Mode==GPIO_MODE_INPUT_PU )
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	789b      	ldrb	r3, [r3, #2]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d007      	beq.n	80002d2 <MCAL_GPIO_Init+0x58>
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d003      	beq.n	80002d2 <MCAL_GPIO_Init+0x58>
 80002ca:	683b      	ldr	r3, [r7, #0]
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d10b      	bne.n	80002ea <MCAL_GPIO_Init+0x70>
	{
		*ptr_config_reg|=((((Pin_config->GPIO_Mode)<<2))<<(shift_value));
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	7892      	ldrb	r2, [r2, #2]
 80002da:	0091      	lsls	r1, r2, #2
 80002dc:	7afa      	ldrb	r2, [r7, #11]
 80002de:	fa01 f202 	lsl.w	r2, r1, r2
 80002e2:	431a      	orrs	r2, r3
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	601a      	str	r2, [r3, #0]
	else
	{

		*ptr_config_reg |=((((Pin_config->GPIO_Mode-4)<<2)|(Pin_config->GPIO_Speed))<<shift_value);
	}
}
 80002e8:	e01c      	b.n	8000324 <MCAL_GPIO_Init+0xaa>
	else if(Pin_config->GPIO_Mode==GPIO_MODE_INPUT_PD)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	789b      	ldrb	r3, [r3, #2]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d109      	bne.n	8000306 <MCAL_GPIO_Init+0x8c>
		*ptr_config_reg|=((0b1000)<<(shift_value));
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	7afa      	ldrb	r2, [r7, #11]
 80002f8:	2108      	movs	r1, #8
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	431a      	orrs	r2, r3
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	e00e      	b.n	8000324 <MCAL_GPIO_Init+0xaa>
		*ptr_config_reg |=((((Pin_config->GPIO_Mode-4)<<2)|(Pin_config->GPIO_Speed))<<shift_value);
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	683a      	ldr	r2, [r7, #0]
 800030c:	7892      	ldrb	r2, [r2, #2]
 800030e:	3a04      	subs	r2, #4
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	6839      	ldr	r1, [r7, #0]
 8000314:	78c9      	ldrb	r1, [r1, #3]
 8000316:	4311      	orrs	r1, r2
 8000318:	7afa      	ldrb	r2, [r7, #11]
 800031a:	fa01 f202 	lsl.w	r2, r1, r2
 800031e:	431a      	orrs	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MCAL_GPIO_Write_Pin>:




void MCAL_GPIO_Write_Pin(GPIO_TypeDef_t * GPIOx,uint16_t GPIO_Pin_Number,uint8_t GPIO_Pin_Value)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	460b      	mov	r3, r1
 8000336:	807b      	strh	r3, [r7, #2]
 8000338:	4613      	mov	r3, r2
 800033a:	707b      	strb	r3, [r7, #1]
	GPIOx->GPIOx_BSRR=(GPIO_Pin_Value == GPIO_PIN_VALUE_HIGH )?((uint32_t)GPIO_Pin_Number):((uint32_t)GPIO_Pin_Number<<16);
 800033c:	787b      	ldrb	r3, [r7, #1]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d101      	bne.n	8000346 <MCAL_GPIO_Write_Pin+0x1a>
 8000342:	887b      	ldrh	r3, [r7, #2]
 8000344:	e001      	b.n	800034a <MCAL_GPIO_Write_Pin+0x1e>
 8000346:	887b      	ldrh	r3, [r7, #2]
 8000348:	041b      	lsls	r3, r3, #16
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6113      	str	r3, [r2, #16]
}
 800034e:	bf00      	nop
 8000350:	370c      	adds	r7, #12
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr

08000358 <__libc_init_array>:
 8000358:	b570      	push	{r4, r5, r6, lr}
 800035a:	2600      	movs	r6, #0
 800035c:	4d0c      	ldr	r5, [pc, #48]	; (8000390 <__libc_init_array+0x38>)
 800035e:	4c0d      	ldr	r4, [pc, #52]	; (8000394 <__libc_init_array+0x3c>)
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	42a6      	cmp	r6, r4
 8000366:	d109      	bne.n	800037c <__libc_init_array+0x24>
 8000368:	f000 f81a 	bl	80003a0 <_init>
 800036c:	2600      	movs	r6, #0
 800036e:	4d0a      	ldr	r5, [pc, #40]	; (8000398 <__libc_init_array+0x40>)
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <__libc_init_array+0x44>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	42a6      	cmp	r6, r4
 8000378:	d105      	bne.n	8000386 <__libc_init_array+0x2e>
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000380:	4798      	blx	r3
 8000382:	3601      	adds	r6, #1
 8000384:	e7ee      	b.n	8000364 <__libc_init_array+0xc>
 8000386:	f855 3b04 	ldr.w	r3, [r5], #4
 800038a:	4798      	blx	r3
 800038c:	3601      	adds	r6, #1
 800038e:	e7f2      	b.n	8000376 <__libc_init_array+0x1e>
 8000390:	080003b8 	.word	0x080003b8
 8000394:	080003b8 	.word	0x080003b8
 8000398:	080003b8 	.word	0x080003b8
 800039c:	080003bc 	.word	0x080003bc

080003a0 <_init>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

080003ac <_fini>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr
